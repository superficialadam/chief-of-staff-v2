#!/bin/bash

# Development helper to set up reverse SSH tunnel for Telegram webhooks
# This forwards webhook traffic from the server to your local Rails instance

set -e

SERVER_HOST="${SERVER_HOST:-hetzner}"
SERVER_USER="${SERVER_USER:-adam}"
LOCAL_PORT="${LOCAL_PORT:-3000}"
REMOTE_PORT="${REMOTE_PORT:-4000}"
SSH_KEY="${SSH_KEY:-}"  # Optional: specify SSH key file

echo "🚇 Setting up reverse SSH tunnel for Telegram webhook development"
echo ""
echo "Configuration:"
echo "  Server: ${SERVER_USER}@${SERVER_HOST}"
echo "  Remote port: ${REMOTE_PORT} (on server)"
echo "  Local port: ${LOCAL_PORT} (your Rails app)"
echo ""

# Check if Rails is running locally
if ! lsof -i:${LOCAL_PORT} > /dev/null 2>&1; then
    echo "⚠️  Warning: Rails doesn't appear to be running on port ${LOCAL_PORT}"
    echo "   Start Rails with: rails s"
    echo ""
fi

echo "Starting reverse SSH tunnel..."
echo "This will forward server:${REMOTE_PORT} → localhost:${LOCAL_PORT}"
echo ""

# Build SSH command with optional key
SSH_CMD="ssh"
if [ -n "$SSH_KEY" ]; then
    echo "Using SSH key: $SSH_KEY"
    SSH_CMD="$SSH_CMD -i $SSH_KEY"
fi

echo "Press Ctrl+C to stop the tunnel"
echo "----------------------------------------"

# Start the reverse SSH tunnel
# -R: Reverse tunnel (remote:4000 -> local:3000)
# -N: Don't execute remote command (just forward ports)
# -v: Verbose output for debugging
$SSH_CMD -R ${REMOTE_PORT}:localhost:${LOCAL_PORT} \
    -o ServerAliveInterval=60 \
    -o ServerAliveCountMax=3 \
    -N \
    -v \
    ${SERVER_HOST}

echo ""
echo "Tunnel closed."